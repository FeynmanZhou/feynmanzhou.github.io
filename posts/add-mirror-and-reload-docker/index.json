[{"content":"My Installation OS CentOS Linux release 7.6 on QingCloud Platform\nAdd source for docker-ce yum  Extend yum function  $ yum install -y yum-utils Add software source information  $ yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo Automatically select the fastest yum registry source  yum makecache fast List the current version of docker-ce that can be installed  View the version list:  $ yum list docker-ce --showduplicates | sort -r docker-ce.x86_64 3:19.03.9-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.8-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.7-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.6-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.5-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.4-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.3-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.2-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.12-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.11-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.10-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.1-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.0-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.9-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.8-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.7-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.6-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.5-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.4-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.3-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.2-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.1-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.0-3.el7 docker-ce-stable docker-ce.x86_64 18.06.3.ce-3.el7 docker-ce-stable docker-ce.x86_64 18.06.3.ce-3.el7 @docker-ce-stable docker-ce.x86_64 18.06.2.ce-3.el7 docker-ce-stable docker-ce.x86_64 18.06.1.ce-3.el7 docker-ce-stable docker-ce.x86_64 18.06.0.ce-3.el7 docker-ce-stable docker-ce.x86_64 18.03.1.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 18.03.0.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 17.12.1.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 17.12.0.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 17.09.1.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 17.09.0.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 17.06.2.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 17.06.1.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 17.06.0.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 17.03.3.ce-1.el7 docker-ce-stable docker-ce.x86_64 17.03.2.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 17.03.1.ce-1.el7.centos docker-ce-stable docker-ce.x86_64 17.03.0.ce-1.el7.centos docker-ce-stable Loading mirror speeds from cached hostfile Loaded plugins: fastestmirror Installed Packages Available Packages * updates: mirrors.tuna.tsinghua.edu.cn * extras: mirrors.tuna.tsinghua.edu.cn * epel: mirrors.tuna.tsinghua.edu.cn * base: mirrors.tuna.tsinghua.edu.cn Install the specified version  # yum -y install docker-ce-[VERSION] $ yum install -y docker-ce-18.06.3.ce-3.el7 Start Docker  Start Docker  $ systemctl start docker Verify the docker information:  $ docker info Containers: 0 Running: 0 Paused: 0 Stopped: 0 Images: 0 Server Version: 18.06.3-ce Storage Driver: overlay2 Backing Filesystem: extfs Supports d_type: true Native Overlay Diff: true Logging Driver: json-file Cgroup Driver: cgroupfs Plugins: Volume: local Network: bridge host macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog Swarm: inactive Runtimes: runc Default Runtime: runc Init Binary: docker-init containerd version: 468a545b9edcd5932818eb9de8e72413e616e86e runc version: a592beb5bc4c4092b1b1bac971afed27687340c5 init version: fec3683 Security Options: seccomp Profile: default Kernel Version: 3.10.0-957.21.3.el7.x86_64 Operating System: CentOS Linux 7 (Core) OSType: linux Architecture: x86_64 CPUs: 8 Total Memory: 15.51GiB Name: i-3f8hoeou ID: 7MHA:FO5V:YCH6:ED46:KWDZ:OY3E:TE6Y:HRNC:F2KU:GSGF:NYDA:KHYA Docker Root Dir: /var/lib/docker Debug Mode (client): false Debug Mode (server): false Registry: https://index.docker.io/v1/ Labels: Experimental: false Insecure Registries: 127.0.0.0/8 Live Restore Enabled: false At last, let\u0026rsquo;s verify the docker version, it demonstrates the Docker CE has been installed successfully.  $ docker version Client: Version: 18.06.3-ce API version: 1.38 Go version: go1.10.3 Git commit: d7080c1 Built: Wed Feb 20 02:26:51 2019 OS/Arch: linux/amd64 Experimental: false Server: Engine: Version: 18.06.3-ce API version: 1.38 (minimum version 1.12) Go version: go1.10.3 Git commit: d7080c1 Built: Wed Feb 20 02:28:17 2019 OS/Arch: linux/amd64 Experimental: false ","description":"How to Install Docker on CentOS 7.6 in China, with China registry mirror","id":2,"section":"posts","tags":["shortcode"],"title":"How to Install Docker on CentOS in China","uri":"http://feynmanzhou.github.io/posts/install-docker-to-centos-in-china/"},{"content":"Authentication issue After I enabled the Two-factor Authentication in GitHub, I can\u0026rsquo;t push the local commits to GitHub repository, and encountered the issue as follows:\ngit push origin master Password for 'https://git@github.com': remote: Invalid username or password. fatal: Authentication failed for 'https://git@github.com/eurydyce/MDANSE.git/'  How do I Resolve it Why this issue happened after Two-factor Authentication has been enabled? I got the answer from GitHub Documentation.\nHere, I just take notes for the solution. GitHub requires users to create a personal access token to replace the password when performing Git operations over HTTPS with Git on the CLI.\nA personal access token is required to authenticate to GitHub in the following situations:\n When you\u0026rsquo;re using [two-factor authentication](two-factor authentication) To access protected content in an organization that uses SAML single sign-on (SSO). Tokens used with organizations that use SAML SSO must be authorized.  Create a Token   Log in to GitHub, in the upper-right corner of any page, click your profile photo, then click Settings.\n  In the left sidebar, click Developer settings.\n  In the left sidebar, click Personal access tokens.\n  Click Generate new token.\n  Name it, then select the scopes, or permissions, you\u0026rsquo;d like to grant this token. To use your token to access repositories from the command line, select repo.\n   Click Generate token.\n  Copy the token. Then you can enter it instead of your password when performing Git operations over HTTPS.\n  $ git clone https://github.com/username/repo.git Username: your_username Password: your_token # Replace your initial password) It works!\n Tip: Personal access tokens can only be used for HTTPS Git operations. If your repository uses an SSH remote URL, you will need to [switch the remote from SSH to HTTPS](switch the remote from SSH to HTTPS).\n Reference  Stackoverflow - GitHub: invalid username or password Creating a personal access token for the command line  ","description":"How to Resolve GitHub Invalid Authentication","id":3,"section":"posts","tags":["shortcode"],"title":"GitHub Invalid Authentication","uri":"http://feynmanzhou.github.io/posts/github-invalid-authentication/"},{"content":"My Environment CentOS Linux release 7.6 on QingCloud Platform\nConfigure the Docker daemon Either pass the \u0026ndash;registry-mirror option when starting dockerd manually, or edit /etc/docker/daemon.json and add the registry-mirrors key and value, to make the change persistent.\n{ \u0026quot;registry-mirrors\u0026quot;: [\u0026quot;https://\u0026lt;my-docker-mirror-host\u0026gt;\u0026quot;] } Save the file and reload Docker for the change to take effect.\nReload Docker Flush changes and restart Docker:\nsudo systemctl daemon-reload sudo systemctl restart docker Reference  Control Docker with systemd Registry as a pull through cache  ","description":"Add a Registry Mirror in Docker","id":4,"section":"posts","tags":["shortcode"],"title":"How to Add a Registry Mirror in Docker","uri":"http://feynmanzhou.github.io/posts/add-mirror-and-reload-docker/"},{"content":"Sample images from Pixabay\n","description":"cartoon gallery","id":5,"section":"gallery","tags":null,"title":"Cartoon","uri":"http://feynmanzhou.github.io/gallery/cartoon/"},{"content":"Sample images from Pixabay\n","description":"photo gallery","id":6,"section":"gallery","tags":null,"title":"Photo","uri":"http://feynmanzhou.github.io/gallery/photo/"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","description":"Hugo, the worldâ€™s fastest framework for building websites","id":11,"section":"","tags":null,"title":"About","uri":"http://feynmanzhou.github.io/about/"}]